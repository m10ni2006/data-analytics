# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dOlFZK3x7QfTR_7ROf6nAQKaZKIhFRhm
"""

from google.colab import files
uploaded = files.upload()

import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error

pip install pandas scikit-learn ortools

import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error
from ortools.constraint_solver import pywrapcp, routing_enums_pb2

# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Nn7mJmq0vQt-dVAOMzqmxTwnjtBzTejm
"""

import numpy as np
import pandas as pd
from sklearn.linear_model import LinearRegression
import networkx as nx

# Sample demand forecasting using linear regression
def forecast_demand(data):
    X = data[["Day"]].values  # Using day as a predictor
    y = data["Demand"].values
    model = LinearRegression()
    model.fit(X, y)
    future_days = np.array([[i] for i in range(len(data), len(data) + 7)])  # Forecast for next 7 days
    predictions = model.predict(future_days)
    return predictions

# Sample route optimization using Dijkstra's algorithm
def optimize_routes(graph, source, target):
    shortest_path = nx.shortest_path(graph, source=source, target=target, weight='weight')
    return shortest_path

# Example data for demand forecasting
demand_data = pd.DataFrame({
    "Day": [1, 2, 3, 4, 5, 6, 7],
    "Demand": [100, 120, 90, 150, 170, 160, 180]
})

# Forecast demand
future_demand = forecast_demand(demand_data)
print("Forecasted Demand for Next 7 Days:", future_demand)

# Example graph for route optimization
G = nx.Graph()
G.add_edge("Warehouse", "Store A", weight=5)
G.add_edge("Warehouse", "Store B", weight=8)
G.add_edge("Store A", "Store B", weight=2)
G.add_edge("Store A", "Store C", weight=3)
G.add_edge("Store B", "Store C", weight=6)

# Optimize route from Warehouse to Store C
optimal_route = optimize_routes(G, "Warehouse", "Store C")
print("Optimal Route:", optimal_route)

import pandas as pd

# Create the DataFrame manually based on the image content
data = {
    "Order_ID": [101, 102, 103, 104, 105, 106, 107, 108, 109, 110],
    "Product_ID": ["PC 3401", "PC3402", "PC3403", "PC3404", "PC3405", "PC3406", "PC3407", "PC3408", "PC3409", "PC3410"],
    "Customer_Name": ["Alice  johnson", "Bob", "Smith", "Davis", "Jack", "Henry", "Clara", "Williams", "Thompson", "Frank"],
    "Accept_date": ["01_02_2025", "02_03_2025", "12_04_2025", "03_05_2025", "04_06_2025", "05_06-2025", "06_07_2025", "07_08_2025", "08_09_2025", "09_09_2025"],
    "Cost_Per_Unit": [2000, 550, 875, 1500, 600, 2500, 500, 750, 864, 390],
    "Quantity": ["Good"] * 10,
    "Weather_Condition": ["Winter", "Rainy", "Summer", "Summer", "Summer", "Rainy", "Rainy", "Rainy", "Winter", "Rainy"],
    "Email_ID": [
        "Alice2005@gmail.com", "Bob5505@gmail.com", "Smith8755@gmail.com", "Davis1505@gmail.com",
        "Jack6005@gmail.com", "Henry2505@gmail.com", "Clara5005@gmail.com", "Williams7505@gmail.com",
        "Thompson8645@gmail.com", "Frank3905@gmail.com"
    ],
    "Delivery_date": ["7-Feb", "5-Mar", "4-Apr", "8-May", "12-Jun", "24-Jun", "10-Jul", "17-Aug", "14-Sep", "19-Sep"]
}

df = pd.DataFrame(data)

# Fix incorrect date format in Accept_date (replace '-' with '_')
df["Accept_date"] = df["Accept_date"].str.replace("-", "_")

# Convert Accept_date to datetime format
df["Accept_date"] = pd.to_datetime(df["Accept_date"], format="%d_%m_%Y")

# Show basic summary
print("Summary:")
print(df.describe(include='all'))

# Filter orders with Rainy weather
rainy_orders = df[df["Weather_Condition"] == "Rainy"]
print("\nRainy Weather Orders:")
print(rainy_orders)

# Calculate average cost per unit
average_cost = df["Cost_Per_Unit"].mean()
print(f"\nAverage Cost per Unit: {average_cost}")